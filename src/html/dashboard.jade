| <%@ page contentType="text/html;charset=UTF-8" language="java" %>
| <%@ page import="ml.festival.aviation.AuthManager" %>
| <%@ page import="javax.naming.InitialContext" %>
| <%@ page import="javax.naming.Context" %>
| <%@ page import="javax.sql.DataSource" %>
| <%@ page import="java.sql.Connection" %>
| <%@ page import="java.sql.PreparedStatement" %>
| <%@ page import="java.sql.ResultSet" %>
| <%@ page import="java.time.LocalDateTime" %>
| <%@ page import="java.time.format.DateTimeFormatter" %>
| <%@ page import="java.time.temporal.ChronoUnit" %>
| <%!
| 	public Boolean isCurrentPage(String requestedPage, String pageName) {
| 		if (requestedPage != null) {
| 			return pageName.equals(requestedPage);
| 		}
| 		return false;
| 	}
| %>
| <%
| 	Boolean validAuth = false;
| 	AuthManager authManager = new AuthManager();
| 
| 	String accountId = "";
| 	String firstName = "";
| 	String lastName = "";
| 	String email = "";
| 	boolean isAdmin = false;
| 
| 	String bId = "";
| 	String bPrefix = "";
| 	String bFirstName = "";
| 	String bLastName = "";
| 	String bStreet = "";
| 	String bPostalCode = "";
| 	String bPostalCity = "";
| 	String bCountry = "";
| 	String bEmail = "";
| 	String bPhone = "";
| 
| 	String result = "";
| 
| 	result = request.getParameter("result");
| 
| 	if (result == null) {
| 	    result = "";
|     }
|  
| 	if (authManager.validate(String.valueOf(session.getAttribute("sid")))) {
| 		validAuth = true;
| 	}
|  
| 	if (!validAuth) {
| 		response.sendRedirect("login.jsp");
| 	} else if (request.getParameter("p") == null || request.getParameter("p").isEmpty()) {
| 		response.sendRedirect("dashboard.jsp?p=profile");
| 	} else if (validAuth) {
|         ResultSet profile = authManager.getProfileDetails(String.valueOf(session.getAttribute("sid")));
| 
|         if (profile.next()) {
|             accountId = profile.getString("id");
|             firstName = profile.getString("firstName");
|             lastName = profile.getString("lastName");
|             email = profile.getString("email");
|             isAdmin = profile.getBoolean("isAdmin");
|         }
| 
|         ResultSet billing = authManager.getBillingAddress(String.valueOf(session.getAttribute("sid")));
| 
|         if (billing != null) {
|             bId = billing.getString("id");
|             bPrefix = billing.getString("prefix");
|             bFirstName = billing.getString("firstName");
|             bLastName = billing.getString("lastName");
|             bStreet = billing.getString("street");
|             bPostalCode = billing.getString("postalCode");
|             bPostalCity = billing.getString("postalCity");
|             bCountry = billing.getString("country");
|             bEmail = billing.getString("email");
|             bPhone = billing.getString("phoneNumber");
|         }
|     }
| 
|     authManager.closeConnection();
| %>

doctype html
html
	head
		meta(charset="utf-8")
		meta(name="viewport", content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no")
	
		title Dashboard – FESTIVAL Aviation
		
		link(rel="stylesheet", href="css/aviation.css")
		link(rel="stylesheet", href="css/modal.built.css")
		link(rel="stylesheet", href="css/flag.built.css")
		link(rel="stylesheet", href="css/dashboard.built.css")
		link(rel="stylesheet", href="css/components/tables.css")
	body
		include _nav

		include _sc-modal

		.content-wrapper
			section.dashboard

				| <%
				|    if (!result.isEmpty()) {
				| %>

				.section-content(style="margin-bottom: 2em")

					| <%
					|     if (result.equals("profileUpdated")) {
					| %>

					article.flag.success
						.header
							.icon
								span
									span.ai.ai-success
							span.title Profil aktualisiert
						.content
							p Dein Profil wurde erfolgreich aktualisiert.

					| <%
					|     } else if (result.equals("passwordUpdated")) {
					| %>

					article.flag.success
						.header
							.icon
								span
									span.ai.ai-success
							span.title Passwort aktualisiert
						.content
							p Dein Passwort wurde erfolgreich aktualisiert.

					| <%
					|     } else if (result.equals("billingUpdated")) {
					| %>

					article.flag.success
						.header
							.icon
								span
									span.ai.ai-success
							span.title Rechnungsadresse aktualisiert
						.content
							p Deine Rechnungsadresse wurde erfolgreich aktualisiert.

					| <%
					|     } else if (result.equals("invalidData")) {
					| %>

					article.flag.error
						.header
							.icon
								span
									span.ai.ai-error
							span.title Ungültige Eingabe
						.content
							p Du musst alle Felder, die nicht als optional gekennzeichnet sind, ausfüllen.

					| <%
					|     } else if (result.equals("oldPasswordWrong")) {
					| %>

					article.flag.error
						.header
							.icon
								span
									span.ai.ai-error
							span.title Passwort falsch
						.content
							p Das alte Passwort ist nicht korrekt.

					| <%
					|     } else if (result.equals("newPasswordsDontMatch")) {
					| %>

					article.flag.error
						.header
							.icon
								span
									span.ai.ai-error
							span.title Passwörter ungleich
						.content
							p Die neuen Passwörter stimmen nicht überein.

					| <%
					|     } else if (result.equals("error")) {
					| %>

					article.flag.error
						.header
							.icon
								span
									span.ai.ai-error
							span.title Hier funktioniert etwas nicht
						.content
							p Beim Durchführen der Aktion ist ein Fehler aufgetreten. Bitte versuch es später noch einmal.

					| <%
					|     }
					| %>

				| <%
				|    }
				| %>

				.section-content.row
					.column.column-3
						ul.user-cp-menu
							li.menu-item.heading Allgemein
							a(href="?p=profile" class!="menu-item <%= isCurrentPage(request.getParameter(\"p\"), \"profile\") ? \"selected\" : \"\" %>")
								li Profil
							a(href="?p=billing" class!="menu-item <%= isCurrentPage(request.getParameter(\"p\"), \"billing\") ? \"selected\" : \"\" %>")
								li Rechnungsadresse

						ul.user-cp-menu
							li.menu-item.heading Buchungen
							a(href="?p=openBookings" class!="menu-item <%= isCurrentPage(request.getParameter(\"p\"), \"openBookings\") ? \"selected\" : \"\" %>")
								li Offene Buchungen
							a(href="?p=completedBookings" class!="menu-item <%= isCurrentPage(request.getParameter(\"p\"), \"completedBookings\") ? \"selected\" : \"\" %>")
								li Abgeschlossene Buchungen

						| <% if (isAdmin) { %>

						ul.user-cp-menu
							li.menu-item.heading Administration
							a(href="sc-admin.jsp" class="menu-item")
								li Support Center Admin Panel

						| <% } %>

						ul.user-cp-menu
							a(href="?p=logout" class="menu-item")
								li Abmelden

					| <% if (isCurrentPage(request.getParameter("p"), "profile")) { %>
					
					.column.column-8.offset-1
						h2 Profil
						p Hier kannst du die Details deines Profils anpassen.

						form(method="POST" action="update_profile.jsp" novalidate)
							input(type="hidden" name="method" value="update-profile")
							input(type="hidden" name="id" value!="<%= accountId %>")
							label(for="firstName") Vorname
							input(type="text" name="firstName" id="firstName" value!="<%= firstName %>")
							label(for="lastName") Nachname
							input(type="text" name="lastName" id="lastName" value!="<%= lastName %>")
							label(for="email") E-Mail-Adresse
							input(type="email" name="email" id="email" value!="<%= email %>")
							button.fill.blue Profil speichern
							
						h3 Passwort ändern

						form(method="POST" action="update_profile.jsp" novalidate)
							input(type="hidden" name="method" value="update-password")
							input(type="hidden" name="id" value!="<%= accountId %>")
							label(for="oldPassword") Altes Passwort
							input(type="password" name="oldPassword" id="oldPassword")
							label(for="oldPassword") Neues Passwort
							input(type="password" name="newPassword" id="newPassword")
							label(for="oldPassword") Neues Passwort bestätigen
							input(type="password" name="newPasswordConfirm" id="newPasswordConfirm")
							button.fill.blue Passwort ändern
							
					| <%
					|    }
					|  
					|    if (isCurrentPage(request.getParameter("p"), "billing")) {
					| %>

					.column.column-8.offset-1
						h2 Rechnungsadresse
						p Zum Buchen von Flügen benötigst du eine gültige Rechnungsadresse. Diese kannst du hier jederzeit ändern.

						form(method="POST" action="update_profile.jsp" novalidate)
							input(type="hidden" name="method" value="update-billing")
							input(type="hidden" name="id" value!="<%= accountId %>")
							input(type="hidden" name="billingId" value!="<%= bId %>")
							
							.row.no-justify
								.column.column-3
									label(for="title") Anrede
									
								.column.column-6
									select(name="title" id="title")

										| <option value="" <%= bPrefix.isEmpty() ? "selected" : null %>></option>
										| <option value="male" <%= bPrefix.equals("male") ? "selected" : null %>>Herr</option>
										| <option value="female" <%= bPrefix.equals("female") ? "selected" : null %>>Frau</option>
									
							.row.no-justify
								.column.column-3
									label(for="firstName") Vorname

								.column.column-6
									input(type="text" name="firstName" id="firstName" value!="<%= bFirstName %>")
								
							.row.no-justify
								.column.column-3
									label(for="lastName") Nachname

								.column.column-6
									input(type="text" name="lastName" id="lastName" value!="<%= bLastName %>")
							
							.row.no-justify
								.column.column-3
									label(for="street") Straße

								.column.column-6
									input(type="text" name="street" id="street" value!="<%= bStreet %>")
							
							.row.no-justify
								.column.column-3
									label(for="zip") PLZ/Ort

								.column.column-2
									input(type="text" name="zip" id="zip" value!="<%= bPostalCode %>")

								.column.column-4
									input(type="text" name="city" id="city" value!="<%= bPostalCity %>")
							
							.row.no-justify
								.column.column-3
									label(for="country") Land

								.column.column-6
									select(name="country" id="country")

										| <option value="de" <%= (bCountry.isEmpty() || bCountry.equals("de")) ? "selected" : null %>>Deutschland</option>
										| <option value="at" <%= bCountry.equals("at") ? "selected" : null %>>Österreich</option>
										| <option value="ch" <%= bCountry.equals("ch") ? "selected" : null %>>Schweiz</option>
							
							.row.no-justify
								.column.column-3
									label(for="email") E-Mail
								
								.column.column-6
									input(type="email" name="email" id="email" value!="<%= bEmail %>")
							
							.row.no-justify
								.column.column-3
									label(for="phone") Telefon

								.column.column-6
									input(type="phone" name="phone" id="phone" value!="<%= bPhone %>")
							
							button.fill.blue Rechnungsadresse ändern
							
					| <% 
					|    }
					|  
					|    if (isCurrentPage(request.getParameter("p"), "openBookings")) {
					| %>

					.column.column-8.offset-1
						h2 Offene Buchungen
						p Hier siehst du eine Liste all deiner noch offenen Buchungen, die bezahlt werden müssen. Sonst darfst du nicht fliegen, yo!</p>
						table
							thead
								tr
									th Flug
									th Route
									th Summe
									th Verbleibend
									
							tbody

								|  <%
								|      InitialContext initialContext;
								|      Context environmentContext;
								|      DataSource dataSource;
								|      Connection conn = null;
								|      ResultSet bookings = null;
								|      String invoice = "";
								|      String flightId = "";
								|      String fromIATA = "";
								|      String toIATA = "";
								|      String fromName = "";
								|      String toName = "";
								|      String extras = "";
								|      float price = 0F;
								|      LocalDateTime dateTime = LocalDateTime.now();
								|      try {
								|          initialContext = new InitialContext();
								|          environmentContext = (Context)initialContext.lookup("java:/comp/env");
								|          dataSource = (DataSource)environmentContext.lookup("jdbc/aviation");
								|          conn = dataSource.getConnection();
								|          PreparedStatement statement = conn.prepareStatement("SELECT * FROM bookings WHERE holder = ? AND paid = FALSE");
								|          statement.setString(1, accountId);
								|          bookings = statement.executeQuery();
								|          while (bookings.next()) {
								|              invoice = bookings.getString("id");
								|              flightId = bookings.getString("flightId");
								|              fromIATA = bookings.getString("fromIATA");
								|              toIATA = bookings.getString("toIATA");
								|              extras = bookings.getString("extras");
								|              price = bookings.getFloat("price");
								|              dateTime = LocalDateTime.parse(bookings.getString("createdAt").replace(" ", "T"), DateTimeFormatter.ISO_DATE_TIME);
								|              PreparedStatement astm = conn.prepareStatement("SELECT name, municipality, iso_country FROM airports WHERE iata_code = ?");
								|              astm.setString(1, fromIATA);
								|              ResultSet airport = astm.executeQuery();
								|              if (airport.next()) {
								|                  fromName = airport.getString("name") + ", " + airport.getString("municipality") + ", " + airport.getString("iso_country");
								|              }
								|              astm.setString(1, toIATA);
								|              airport = astm.executeQuery();
								|              if (airport.next()) {
								|                  toName = airport.getString("name") + ", " + airport.getString("municipality") + ", " + airport.getString("iso_country");
								|              }
								|              if (extras.length() > 0 && extras.contains(",")) {
								|                  for (int i = 0; i < extras.split(",").length; i++) {
								|                      PreparedStatement stm = conn.prepareStatement("SELECT * FROM services WHERE serviceId = ?");
								|                      stm.setString(1, extras.split(",")[i]);
								|                      ResultSet extra = stm.executeQuery();
								|                      if (extra.next()) {
								|                          price += extra.getFloat("price");
								|                      }
								|                  }
								|              }
								|  %>

								tr
									td <%= flightId %>
									td
										abbr(title!="<%= fromName %>") <%= fromIATA %>
										| &rarr; 
										abbr(title!="<%= toName %>") <%= toIATA %>
									td 
										| <%= String.format("%.2f", price) %>€
										br
										a(href!="checkout.jsp?invoice=<%= invoice %>" target="_blank" style="white-space: nowrap") Jetzt bezahlen
									td <%= LocalDateTime.now().until(dateTime.plusHours(24), ChronoUnit.HOURS) %> Stunden
								
								| <%
								|       }
								|       conn.close();
								|   } catch (Exception e) {
								|       // MySQL Error
								|       e.printStackTrace();
								|   }
								| %>

					| <%
					|   }
					| 
					|   if (isCurrentPage(request.getParameter("p"), "completedBookings")) {
					| %>

					.column.column-8.offset-1
						h2 Abgeschlossene Buchungen
						p Hier siehst du eine Liste all deiner abgeschlossenen Buchungen, die die bereits bezahlt wurden.
						table
							thead
								tr
									th Flug
									th Route
									th Klasse
									th Extras
									th Abflug
									th Bezahlt am
									
								tbody

									| <%
									|     InitialContext initialContext;
									|     Context environmentContext;
									|     DataSource dataSource;
									|     Connection conn = null;
									|     ResultSet bookings = null;
									|     String bookingId = "";
									|     String svid = "";
									|     String flightId = "";
									|     String fromIATA = "";
									|     String toIATA = "";
									|     String fromName = "";
									|     String toName = "";
									|     String flightClass = "";
									|     String extras = "";
									|     String extrasDisplay = "";
									|     LocalDateTime departure = LocalDateTime.now();
									|     LocalDateTime dateTime = LocalDateTime.now();
									|     boolean cancelled = false;
									|     try {
									|         initialContext = new InitialContext();
									|         environmentContext = (Context)initialContext.lookup("java:/comp/env");
									|         dataSource = (DataSource)environmentContext.lookup("jdbc/aviation");
									|         conn = dataSource.getConnection();
									|         PreparedStatement statement = conn.prepareStatement("SELECT * FROM bookings WHERE holder = ? AND paid = TRUE");
									|         statement.setString(1, accountId);
									|         bookings = statement.executeQuery();
									|         while (bookings.next()) {
									|             bookingId = bookings.getString("id");
									|             svid = bookings.getString("svid");
									|             flightId = bookings.getString("flightId");
									|             fromIATA = bookings.getString("fromIATA");
									|             toIATA = bookings.getString("toIATA");
									|             flightClass = bookings.getString("class").toUpperCase().replace("_", " ");
									|             extras = bookings.getString("extras");
									|             departure = LocalDateTime.parse(bookings.getString("departure").replace(" ", "T"), DateTimeFormatter.ISO_DATE_TIME);
									|             dateTime = LocalDateTime.parse(bookings.getString("updatedAt").replace(" ", "T"), DateTimeFormatter.ISO_DATE_TIME);
									|             extrasDisplay = "";
									|             PreparedStatement astm = conn.prepareStatement("SELECT name, municipality, iso_country FROM airports WHERE iata_code = ?");
									|             astm.setString(1, fromIATA);
									|             ResultSet airport = astm.executeQuery();
									|             if (airport.next()) {
									|                 fromName = airport.getString("name") + ", " + airport.getString("municipality") + ", " + airport.getString("iso_country");
									|             }
									|             astm.setString(1, toIATA);
									|             airport = astm.executeQuery();
									|             if (airport.next()) {
									|                 toName = airport.getString("name") + ", " + airport.getString("municipality") + ", " + airport.getString("iso_country");
									|             }
									|             if (extras.length() > 0 && extras.contains(",")) {
									|                 for (int i = 0; i < extras.split(",").length; i++) {
									|                     PreparedStatement stm = conn.prepareStatement("SELECT * FROM services WHERE serviceId = ?");
									|                     stm.setString(1, extras.split(",")[i]);
									|                     ResultSet extra = stm.executeQuery();
									|                     if (extra.next()) {
									|                         extrasDisplay += extra.getString("title") + "\n";
									|                     }
									|                 }
									|             } else {
									|                 extrasDisplay = "Keine Extras gebucht";
									|             }
									|             PreparedStatement stm = conn.prepareStatement("SELECT * FROM cancellations WHERE ticketId = ?");
									|             stm.setString(1, bookingId);
									|             ResultSet cancellation = stm.executeQuery();
									|             cancelled = cancellation.next();
									| %>

									tr
										td <%= flightId %>
										td
											abbr(title!="<%= fromName %>") <%= fromIATA %>
											| &rarr; 
											abbr(title!="<%= toName %>") <%= toIATA %>
										td <%= flightClass %>
										td
											a.modal-trigger(style="cursor: pointer" data-modal-type="info" data-modal-title="Extras" data-modal-text!="<%= extrasDisplay %>") Anzeigen
										td <%= departure.format(DateTimeFormatter.ofPattern("dd.MM.yy HH:mm")) %>

										| <%
										|     if (cancelled) {
										| %>

										td Storniert

										| <%
										|     } else {
										| %>

										td
											| <%= dateTime.format(DateTimeFormatter.ofPattern("dd.MM.yy")) %>
											br
											a.cancel.modal-trigger(style="cursor: pointer; white-space: nowrap" data-b-id!="<%= bookingId %>" data-b-svid!="<%= svid %>" data-b-holder!="<%= accountId %>" data-b-email!="<%= email %>" data-modal-type="error" data-modal-title="Ticket wirklich stornieren?" data-modal-text!="Wenn alle Eingaben korrekt sind, wird das Ticket unwiderruflich storniert und unbrauchbar. Die Stornierung kann nicht rückgängig gemacht werden.&#xA;&#xA;SVID: <%= svid %>" data-modal-primary="Ticket stornieren" data-modal-primary-action="submit" data-modal-primary-target="hidden-form") Stornieren
										
								| <%
								|           }
								| 
								|       }
								| 
								|       conn.close();
								|   } catch (Exception e) {
								|       // MySQL Error
								|       e.printStackTrace();
								|   }
								| %>

					| <%
					|   }
					| 
					|   if (isCurrentPage(request.getParameter("p"), "logout")) {
					| %>

					.column.column-8.offset-1
						h2 Abmeldung erfolgt...
						p Du wirst in Kürze abgemeldet und zur Startseite umgeleitet

						| <%
						| 	authManager.openConnection();
						| 	if (authManager.destroySession(String.valueOf(session.getAttribute("sid"))) == AuthManager.ErrorCode.OK) {
						| 		response.sendRedirect("index.jsp");
						| 	}
						| 	authManager.closeConnection();
						| %>
						
					| <% } %>
				
	include _footer

	script(src="js/dashboard.js")
	script(src="js/modal.js")
	script(src="js/icons.js")